import subprocess

from cloudify.state import ctx_parameters as inputs


def regenerate_host_keys():
    # Do not regenerate moduli as it will take an excessive amount of time
    # and leave existing file alone in case it was generated by the user

    # regenerate ecdsa key
    subprocess.check_call(["rm", "-f", "/etc/ssh/ssh_host_ecdsa_key"])
    subprocess.check_call(["rm", "-f", "/etc/ssh/ssh_host_ecdsa_key.pub"])
    subprocess.check_call(["ssh-keygen", "-b", "521", "-f",
                           "/etc/ssh/ssh_host_ecdsa_key", "-N", '', "-t",
                           "ecdsa"])

    # regenerate ed25519 key
    subprocess.check_call(["rm", "-f", "/etc/ssh/ssh_host_ed25519_key"])
    subprocess.check_call(["rm", "-f", "/etc/ssh/ssh_host_ed25519_key.pub"])
    subprocess.check_call(["ssh-keygen", "-f",
                           "/etc/ssh/ssh_host_ed25519_key",
                           "-N", '', "-t", "ed25519"])

    # regenerate rsa key
    subprocess.check_call(["rm", "-f", "/etc/ssh/ssh_host_rsa_key"])
    subprocess.check_call(["rm", "-f", "/etc/ssh/ssh_host_rsa_key.pub"])
    subprocess.check_call(["ssh-keygen", "-b", "4096", "-f",
                           "/etc/ssh/ssh_host_rsa_key", "-N", '', "-t",
                           "rsa"])

    # restart ssh
    subprocess.check_call(["systemctl", "restart", "sshd"])


def authorize_user_ssh_key(ssh_key):
    with open('/home/<<IMAGEBUILDERUSER>>/.ssh/authorized_keys',
              'a') as auth_handle:
        auth_handle.write('{ssh_key}\n'.format(ssh_key=ssh_key))


def main():
    regenerate_host_keys()

    authorize_user_ssh_key(inputs['user_ssh_key'])


if __name__ == '__main__':
    main()
