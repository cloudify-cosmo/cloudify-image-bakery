#! /usr/bin/env python
import os

from cloudify_rest_client import CloudifyClient
from cloudify_cli import env
from cloudify_cli import constants
import yaml

MANAGER_BLUEPRINTS_PATH = '/opt/cfy/cloudify-manager-blueprints'


def update_context(platform):
    auth_header = env.get_auth_header(
        username=os.environ['CLOUDIFY_MANAGER_USERNAME'],
        password=os.environ['CLOUDIFY_MANAGER_PASSWORD'],
    )
    auth_header[constants.CLOUDIFY_TENANT_HEADER] = 'default_tenant'
    # sudo_user = os.environ.get('SUDO_USER')
    # if sudo_user is not None:
    #     home = '~{}'.format(sudo_user)
    # else:
    #     home = '~'
    c = CloudifyClient(headers=auth_header)

    name = c.manager.get_context()['name']
    context = c.manager.get_context()['context']

    configuration_blueprint_path = \
        '/opt/cloudify_configuration/configure_{platform}.yaml'
    configuration_blueprint_path = configuration_blueprint_path.format(
        platform=platform,
    )

    with open(configuration_blueprint_path) as configuration_blueprint_handle:
        configuration_blueprint = yaml.load(
            configuration_blueprint_handle.read()
        )

    context['cloudify']['manager_configuration'] = {
        'enabled': True,
        'completed': False,
        'title': '{platform} configuration'.format(
            platform=platform.capitalize(),
        ),
        'blueprint_path': '/opt/cloudify_configuration/blueprint.yaml',
        'inputs': configuration_blueprint.get('inputs', {}),
        'outputs': configuration_blueprint.get('outputs', {}),
    }

    print('Updating context')
    c.manager.update_context(name, context)


if __name__ == '__main__':
    update_context(platform=os.environ['PACKER_BUILD_NAME'])
